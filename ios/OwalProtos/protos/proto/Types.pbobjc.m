// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "proto/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TypesRoot

@implementation TypesRoot

@end

#pragma mark - TypesRoot_FileDescriptor

static GPBFileDescriptor *TypesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"owal"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum IncidentSeverity

GPBEnumDescriptor *IncidentSeverity_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Informational\000Warning\000GeneralAlert\000Indiv"
        "idualAlert\000";
    static const int32_t values[] = {
        IncidentSeverity_Informational,
        IncidentSeverity_Warning,
        IncidentSeverity_GeneralAlert,
        IncidentSeverity_IndividualAlert,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(IncidentSeverity)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:IncidentSeverity_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL IncidentSeverity_IsValidValue(int32_t value__) {
  switch (value__) {
    case IncidentSeverity_Informational:
    case IncidentSeverity_Warning:
    case IncidentSeverity_GeneralAlert:
    case IncidentSeverity_IndividualAlert:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UUID

@implementation UUID

@dynamic uuid;

typedef struct UUID__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} UUID__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = UUID_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UUID__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UUID class]
                                     rootClass:[TypesRoot class]
                                          file:TypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UUID__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TimeStamp

@implementation TimeStamp

@dynamic s;
@dynamic ns;

typedef struct TimeStamp__storage_ {
  uint32_t _has_storage_[1];
  int32_t ns;
  int64_t s;
} TimeStamp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "s",
        .dataTypeSpecific.className = NULL,
        .number = TimeStamp_FieldNumber_S,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TimeStamp__storage_, s),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ns",
        .dataTypeSpecific.className = NULL,
        .number = TimeStamp_FieldNumber_Ns,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TimeStamp__storage_, ns),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TimeStamp class]
                                     rootClass:[TypesRoot class]
                                          file:TypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TimeStamp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TimeDelta

@implementation TimeDelta

@dynamic s;
@dynamic ns;

typedef struct TimeDelta__storage_ {
  uint32_t _has_storage_[1];
  int32_t ns;
  int64_t s;
} TimeDelta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "s",
        .dataTypeSpecific.className = NULL,
        .number = TimeDelta_FieldNumber_S,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TimeDelta__storage_, s),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ns",
        .dataTypeSpecific.className = NULL,
        .number = TimeDelta_FieldNumber_Ns,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TimeDelta__storage_, ns),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TimeDelta class]
                                     rootClass:[TypesRoot class]
                                          file:TypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TimeDelta__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Location

@implementation Location

@dynamic hasId_p, id_p;
@dynamic description_p;

typedef struct Location__storage_ {
  uint32_t _has_storage_[1];
  UUID *id_p;
  NSString *description_p;
} Location__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(UUID),
        .number = Location_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Location__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Location_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Location__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Location class]
                                     rootClass:[TypesRoot class]
                                          file:TypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Location__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
