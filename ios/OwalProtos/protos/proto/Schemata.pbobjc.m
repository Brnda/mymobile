// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/schemata.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "proto/Schemata.pbobjc.h"
 #import "proto/Types.pbobjc.h"
 #import "proto/Device.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SchemataRoot

@implementation SchemataRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[TypesRoot extensionRegistry]];
    [registry addExtensions:[DeviceRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SchemataRoot_FileDescriptor

static GPBFileDescriptor *SchemataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"owal"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CameraSchema

@implementation CameraSchema

@dynamic cameraArray, cameraArray_Count;

typedef struct CameraSchema__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cameraArray;
} CameraSchema__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cameraArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Camera),
        .number = CameraSchema_FieldNumber_CameraArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSchema__storage_, cameraArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CameraSchema class]
                                     rootClass:[SchemataRoot class]
                                          file:SchemataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CameraSchema__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClipSchema

@implementation ClipSchema

@dynamic clipArray, clipArray_Count;

typedef struct ClipSchema__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *clipArray;
} ClipSchema__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clipArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Clip),
        .number = ClipSchema_FieldNumber_ClipArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClipSchema__storage_, clipArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClipSchema class]
                                     rootClass:[SchemataRoot class]
                                          file:SchemataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClipSchema__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DomainSchema

@implementation DomainSchema

@dynamic domainArray, domainArray_Count;

typedef struct DomainSchema__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *domainArray;
} DomainSchema__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "domainArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Domain),
        .number = DomainSchema_FieldNumber_DomainArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DomainSchema__storage_, domainArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DomainSchema class]
                                     rootClass:[SchemataRoot class]
                                          file:SchemataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DomainSchema__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LocationSchema

@implementation LocationSchema

@dynamic locationArray, locationArray_Count;

typedef struct LocationSchema__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *locationArray;
} LocationSchema__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Location),
        .number = LocationSchema_FieldNumber_LocationArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LocationSchema__storage_, locationArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LocationSchema class]
                                     rootClass:[SchemataRoot class]
                                          file:SchemataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LocationSchema__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
