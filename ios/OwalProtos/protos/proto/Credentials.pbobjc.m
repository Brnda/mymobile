// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/credentials.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "proto/Credentials.pbobjc.h"
 #import "proto/Device.pbobjc.h"
 #import "proto/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CredentialsRoot

@implementation CredentialsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[DeviceRoot extensionRegistry]];
    [registry addExtensions:[TypesRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - CredentialsRoot_FileDescriptor

static GPBFileDescriptor *CredentialsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"owal"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - User

@implementation User

@dynamic hasId_p, id_p;
@dynamic description_p;
@dynamic authenticator;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  UUID *id_p;
  NSString *description_p;
  NSData *authenticator;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(UUID),
        .number = User_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authenticator",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Authenticator,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, authenticator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[CredentialsRoot class]
                                          file:CredentialsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Tenant

@implementation Tenant

@dynamic hasId_p, id_p;
@dynamic hasUser, user;
@dynamic canDelegate;
@dynamic hasParentTenant, parentTenant;
@dynamic accessArray, accessArray_Count;
@dynamic childTenantArray, childTenantArray_Count;

typedef struct Tenant__storage_ {
  uint32_t _has_storage_[1];
  UUID *id_p;
  User *user;
  UUID *parentTenant;
  NSMutableArray *accessArray;
  NSMutableArray *childTenantArray;
} Tenant__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(UUID),
        .number = Tenant_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Tenant__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Tenant_FieldNumber_User,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Tenant__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "canDelegate",
        .dataTypeSpecific.className = NULL,
        .number = Tenant_FieldNumber_CanDelegate,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "parentTenant",
        .dataTypeSpecific.className = GPBStringifySymbol(UUID),
        .number = Tenant_FieldNumber_ParentTenant,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Tenant__storage_, parentTenant),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accessArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Tenant_TenantAccess),
        .number = Tenant_FieldNumber_AccessArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Tenant__storage_, accessArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "childTenantArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UUID),
        .number = Tenant_FieldNumber_ChildTenantArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Tenant__storage_, childTenantArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tenant class]
                                     rootClass:[CredentialsRoot class]
                                          file:CredentialsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Tenant__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Tenant_TenantAccess

@implementation Tenant_TenantAccess

@dynamic hasCamera, camera;
@dynamic hasStartTime, startTime;
@dynamic hasStartDelta, startDelta;
@dynamic canSave;

typedef struct Tenant_TenantAccess__storage_ {
  uint32_t _has_storage_[1];
  Camera *camera;
  TimeStamp *startTime;
  TimeDelta *startDelta;
} Tenant_TenantAccess__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "camera",
        .dataTypeSpecific.className = GPBStringifySymbol(Camera),
        .number = Tenant_TenantAccess_FieldNumber_Camera,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Tenant_TenantAccess__storage_, camera),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = GPBStringifySymbol(TimeStamp),
        .number = Tenant_TenantAccess_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Tenant_TenantAccess__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startDelta",
        .dataTypeSpecific.className = GPBStringifySymbol(TimeDelta),
        .number = Tenant_TenantAccess_FieldNumber_StartDelta,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Tenant_TenantAccess__storage_, startDelta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "canSave",
        .dataTypeSpecific.className = NULL,
        .number = Tenant_TenantAccess_FieldNumber_CanSave,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tenant_TenantAccess class]
                                     rootClass:[CredentialsRoot class]
                                          file:CredentialsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Tenant_TenantAccess__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Authorizer

@implementation Authorizer

@dynamic hasId_p, id_p;
@dynamic opaque;

typedef struct Authorizer__storage_ {
  uint32_t _has_storage_[1];
  UUID *id_p;
  NSData *opaque;
} Authorizer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(UUID),
        .number = Authorizer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Authorizer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opaque",
        .dataTypeSpecific.className = NULL,
        .number = Authorizer_FieldNumber_Opaque,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Authorizer__storage_, opaque),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Authorizer class]
                                     rootClass:[CredentialsRoot class]
                                          file:CredentialsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Authorizer__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
