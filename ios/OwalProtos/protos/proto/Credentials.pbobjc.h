// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/credentials.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Camera;
@class Tenant_TenantAccess;
@class TimeDelta;
@class TimeStamp;
@class UUID;
@class User;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - CredentialsRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface CredentialsRoot : GPBRootObject
@end

#pragma mark - User

typedef GPB_ENUM(User_FieldNumber) {
  User_FieldNumber_Id_p = 1,
  User_FieldNumber_Description_p = 2,
  User_FieldNumber_Authenticator = 3,
};

/// A <User> is what authenticates a user to the system. The actual
/// authentication menthod is TBD.
@interface User : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *id_p;
/// Test to see if @c id_p has been set.
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

@property(nonatomic, readwrite, copy, null_resettable) NSData *authenticator;

@end

#pragma mark - Tenant

typedef GPB_ENUM(Tenant_FieldNumber) {
  Tenant_FieldNumber_Id_p = 1,
  Tenant_FieldNumber_User = 2,
  Tenant_FieldNumber_CanDelegate = 3,
  Tenant_FieldNumber_ParentTenant = 4,
  Tenant_FieldNumber_AccessArray = 5,
  Tenant_FieldNumber_ChildTenantArray = 6,
};

/// A <Tenant> is a descriptor of a <User>'s rights.  This is usually an
/// actual tenant of an apartment, but it can also be the building
/// manager, the super, a security guard, etc.
/// A <Tenant> has access to a set of <Camera>s and the <Clip>s
/// produced by those cameras.
/// A <Tenant> can give other <Tenant>s access to subsets of its access
/// rights if the <can_delegate> field is true.
@interface Tenant : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *id_p;
/// Test to see if @c id_p has been set.
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, strong, null_resettable) User *user;
/// Test to see if @c user has been set.
@property(nonatomic, readwrite) BOOL hasUser;

@property(nonatomic, readwrite) BOOL canDelegate;

/// who gave me access?
@property(nonatomic, readwrite, strong, null_resettable) UUID *parentTenant;
/// Test to see if @c parentTenant has been set.
@property(nonatomic, readwrite) BOOL hasParentTenant;

/// What access I have
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Tenant_TenantAccess*> *accessArray;
/// The number of items in @c accessArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger accessArray_Count;

/// My delegations.
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<UUID*> *childTenantArray;
/// The number of items in @c childTenantArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger childTenantArray_Count;

@end

#pragma mark - Tenant_TenantAccess

typedef GPB_ENUM(Tenant_TenantAccess_FieldNumber) {
  Tenant_TenantAccess_FieldNumber_Camera = 1,
  Tenant_TenantAccess_FieldNumber_StartTime = 2,
  Tenant_TenantAccess_FieldNumber_StartDelta = 3,
  Tenant_TenantAccess_FieldNumber_CanSave = 4,
};

@interface Tenant_TenantAccess : GPBMessage

/// UUID of camera
@property(nonatomic, readwrite, strong, null_resettable) Camera *camera;
/// Test to see if @c camera has been set.
@property(nonatomic, readwrite) BOOL hasCamera;

/// access clips created after this date -- and/or --
@property(nonatomic, readwrite, strong, null_resettable) TimeStamp *startTime;
/// Test to see if @c startTime has been set.
@property(nonatomic, readwrite) BOOL hasStartTime;

/// access clips created this far in the past
@property(nonatomic, readwrite, strong, null_resettable) TimeDelta *startDelta;
/// Test to see if @c startDelta has been set.
@property(nonatomic, readwrite) BOOL hasStartDelta;

/// save private copies of clips
@property(nonatomic, readwrite) BOOL canSave;

@end

#pragma mark - Authorizer

typedef GPB_ENUM(Authorizer_FieldNumber) {
  Authorizer_FieldNumber_Id_p = 1,
  Authorizer_FieldNumber_Opaque = 101,
};

@interface Authorizer : GPBMessage

/// TODO(ji): is this what we want? 
/// https://tools.ietf.org/html/rfc7519
@property(nonatomic, readwrite, strong, null_resettable) UUID *id_p;
/// Test to see if @c id_p has been set.
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, copy, null_resettable) NSData *opaque;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
