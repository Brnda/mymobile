// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/incident.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "proto/Incident.pbobjc.h"
 #import "proto/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - IncidentRoot

@implementation IncidentRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[TypesRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - IncidentRoot_FileDescriptor

static GPBFileDescriptor *IncidentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"owal"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Incident

@implementation Incident

@dynamic hasId_p, id_p;
@dynamic hasTs, ts;
@dynamic severity;
@dynamic description_p;
@dynamic clipsArray, clipsArray_Count;

typedef struct Incident__storage_ {
  uint32_t _has_storage_[1];
  IncidentSeverity severity;
  UUID *id_p;
  TimeStamp *ts;
  NSString *description_p;
  NSMutableArray *clipsArray;
} Incident__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(UUID),
        .number = Incident_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Incident__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ts",
        .dataTypeSpecific.className = GPBStringifySymbol(TimeStamp),
        .number = Incident_FieldNumber_Ts,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Incident__storage_, ts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "severity",
        .dataTypeSpecific.enumDescFunc = IncidentSeverity_EnumDescriptor,
        .number = Incident_FieldNumber_Severity,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Incident__storage_, severity),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Incident_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Incident__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clipsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Incident_ClipClip),
        .number = Incident_FieldNumber_ClipsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Incident__storage_, clipsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Incident class]
                                     rootClass:[IncidentRoot class]
                                          file:IncidentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Incident__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Incident_Severity_RawValue(Incident *message) {
  GPBDescriptor *descriptor = [Incident descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Incident_FieldNumber_Severity];
  return GPBGetMessageInt32Field(message, field);
}

void SetIncident_Severity_RawValue(Incident *message, int32_t value) {
  GPBDescriptor *descriptor = [Incident descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Incident_FieldNumber_Severity];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Incident_ClipClip

@implementation Incident_ClipClip

@dynamic hasClip, clip;
@dynamic hasStartOffset, startOffset;
@dynamic hasDuration, duration;

typedef struct Incident_ClipClip__storage_ {
  uint32_t _has_storage_[1];
  UUID *clip;
  TimeDelta *startOffset;
  TimeDelta *duration;
} Incident_ClipClip__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clip",
        .dataTypeSpecific.className = GPBStringifySymbol(UUID),
        .number = Incident_ClipClip_FieldNumber_Clip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Incident_ClipClip__storage_, clip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startOffset",
        .dataTypeSpecific.className = GPBStringifySymbol(TimeDelta),
        .number = Incident_ClipClip_FieldNumber_StartOffset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Incident_ClipClip__storage_, startOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = GPBStringifySymbol(TimeDelta),
        .number = Incident_ClipClip_FieldNumber_Duration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Incident_ClipClip__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Incident_ClipClip class]
                                     rootClass:[IncidentRoot class]
                                          file:IncidentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Incident_ClipClip__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
